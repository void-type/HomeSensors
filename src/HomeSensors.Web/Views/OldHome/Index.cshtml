@model HomeSensors.Data.Repositories.Models.GraphViewModel

@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Temps</h1>
</div>

<div>
    <canvas id="myChart"></canvas>
</div>

@foreach (var current in Model.Current) {
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">@(Math.Round((decimal)current.TemperatureCelsius, 1).ToString(".0"))C @current.Location</h5>
            <p><small class="fw-light">@current.Time</small></p>
        </div>
    </div>
}

@section Styles {
}

@section Scripts {
<script src="https://cdn.jsdelivr.net/npm/chart.js@@^3"></script>
<script src="https://cdn.jsdelivr.net/npm/moment@@^2"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-moment@@^1"></script>

<script>
    function getRandomColor() {
        var letters = '0123456789ABCDEF'.split('');
        var color = '#';
        for (var i = 0; i < 6; i++ ) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }

    var colors = [
        '#2ac4b3',
        '#feaf29',
        '#ff617b',
        '#73a2ef',
        '#b180d0',
        '#3064cf',
        '#d0a45f',
        '#8aaec7',
        '#ef65a2',
        '#8aaec7',
    ];

    const model = @Json.Serialize(Model);

    console.log(model);

    const data = {
        datasets:  model.series
            .map((s, si) => {
                return {
                    label: s.location,
                    data: s.points.map(p => ({ x: p.time, y: Math.round(p.temperatureCelsius * 10) / 10 })),
                    borderColor: colors[si],
                };
            }),
    };

    console.log(data);

    const config = {
        type: 'line',
        data: data,
        options: {
            // 12 hours
            spanGaps: 1000 * 60 * 60 * 12,
            responsive: true,
            plugins: {
                legend: {
                    position: 'bottom',
                },
                title: {
                    display: false,
                }
            },
            scales: {
                x: {
                    type: 'time',
                    time:{
                    },
                    ticks: {
                        autoSkip: false,
                        major: {
                            enabled: true
                        },
                        font: function(context) {
                            if (context.tick && context.tick.major) {
                                return {
                                    weight: 'bold',
                                };
                            }
                        }
                    }
                }
            }
        },
    };

    const myChart = new Chart(
        document.getElementById('myChart'),
        config
    );
</script>
}
